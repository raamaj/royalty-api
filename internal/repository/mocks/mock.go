// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/mock.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	domain "royalty-api/internal/domain"
	model "royalty-api/internal/model"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(id uint, timeNow time.Time) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, timeNow)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(id, timeNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), id, timeNow)
}

// Insert mocks base method.
func (m *MockUserRepository) Insert(input *domain.UserRequest, timeNow time.Time) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", input, timeNow)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserRepositoryMockRecorder) Insert(input, timeNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepository)(nil).Insert), input, timeNow)
}

// List mocks base method.
func (m *MockUserRepository) List() (*[]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(*[]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepository)(nil).List))
}

// Update mocks base method.
func (m *MockUserRepository) Update(input *domain.UserRequest, timeNow time.Time) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input, timeNow)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(input, timeNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), input, timeNow)
}

// View mocks base method.
func (m *MockUserRepository) View(id uint) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// View indicates an expected call of View.
func (mr *MockUserRepositoryMockRecorder) View(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockUserRepository)(nil).View), id)
}

// MockVoucherRepository is a mock of VoucherRepository interface.
type MockVoucherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVoucherRepositoryMockRecorder
}

// MockVoucherRepositoryMockRecorder is the mock recorder for MockVoucherRepository.
type MockVoucherRepositoryMockRecorder struct {
	mock *MockVoucherRepository
}

// NewMockVoucherRepository creates a new mock instance.
func NewMockVoucherRepository(ctrl *gomock.Controller) *MockVoucherRepository {
	mock := &MockVoucherRepository{ctrl: ctrl}
	mock.recorder = &MockVoucherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoucherRepository) EXPECT() *MockVoucherRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVoucherRepository) Create(invoice string, timeNow time.Time) (*model.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", invoice, timeNow)
	ret0, _ := ret[0].(*model.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVoucherRepositoryMockRecorder) Create(invoice, timeNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVoucherRepository)(nil).Create), invoice, timeNow)
}

// List mocks base method.
func (m *MockVoucherRepository) List(userID uint) (*[]model.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", userID)
	ret0, _ := ret[0].(*[]model.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVoucherRepositoryMockRecorder) List(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVoucherRepository)(nil).List), userID)
}

// Use mocks base method.
func (m *MockVoucherRepository) Use(code string, timeNow time.Time) (*model.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", code, timeNow)
	ret0, _ := ret[0].(*model.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Use indicates an expected call of Use.
func (mr *MockVoucherRepositoryMockRecorder) Use(code, timeNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockVoucherRepository)(nil).Use), code, timeNow)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionRepository) Create(request *domain.TransactionRequest, timeNow time.Time) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request, timeNow)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionRepositoryMockRecorder) Create(request, timeNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionRepository)(nil).Create), request, timeNow)
}

// List mocks base method.
func (m *MockTransactionRepository) List(userId uint) (*[]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", userId)
	ret0, _ := ret[0].(*[]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTransactionRepositoryMockRecorder) List(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransactionRepository)(nil).List), userId)
}

// UpdateVoucherGenerated mocks base method.
func (m *MockTransactionRepository) UpdateVoucherGenerated(invoice string) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherGenerated", invoice)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoucherGenerated indicates an expected call of UpdateVoucherGenerated.
func (mr *MockTransactionRepositoryMockRecorder) UpdateVoucherGenerated(invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherGenerated", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateVoucherGenerated), invoice)
}
